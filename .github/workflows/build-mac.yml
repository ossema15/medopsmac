name: Build macOS (DMG/ZIP)

on:
  workflow_dispatch:
    inputs:
      arch:
        description: "Architecture to build (x64, arm64, both)"
        required: false
        default: both
  push:
    branches: [ main ]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'webpack.config.js'
      - 'src/**'
      - 'main/**'
      - 'app/**'
      - '.github/workflows/build-mac.yml'

jobs:
  build-mac:
    runs-on: macos-latest
    defaults:
      run:
        working-directory: OneDrive/Documents/app-assistant

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        env:
          NODE_ENV: development
        run: |
          if [ -f package-lock.json ]; then npm ci --include=dev; else npm i --include=dev; fi

      - name: "Debug: show installed binaries"
        run: |
          ls -la node_modules/.bin || true

      - name: Build renderer
        run: npm run build

      - name: Build macOS artifacts (universal)
        env:
          # Optional signing/notarization (set these as GitHub Secrets if you want notarized builds)
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_IDENTITY_AUTO: true
          # If you use API key-based notarization instead, provide:
          # APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          # APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        run: |
          # 1) Build per-arch apps to produce .app bundles
          npx electron-builder --mac dmg zip --x64
          npx electron-builder --mac dmg zip --arm64
          # 2) Merge into a universal .app (use programmatic API; generate a small script to avoid YAML quoting issues)
          mkdir -p scripts
          printf "%s\n" \
            "const { makeUniversalApp } = require('@electron/universal');" \
            "(async () => {" \
            "  await makeUniversalApp({" \
            "    x64AppPath: 'dist/mac/MedOps.app'," \
            "    arm64AppPath: 'dist/mac-arm64/MedOps.app'," \
            "    outAppPath: 'dist/MedOps-universal.app'," \
            "    force: true," \
            "    mergeASARs: true," \
            "  });" \
            "})().catch((e) => { console.error(e); process.exit(1); });" \
            > scripts/merge-universal.cjs

          if node -e "require.resolve('@electron/universal')" >/dev/null 2>&1; then
            echo "Merging using local @electron/universal"
            node scripts/merge-universal.cjs
          else
            echo "Local require failed; merging using npx-provided @electron/universal"
            npx -y -p @electron/universal node scripts/merge-universal.cjs
          fi
          # 3) Package the universal app into DMG/ZIP
          npx electron-builder --mac dmg zip --prepackaged dist/MedOps-universal.app

      - name: Upload DMG (universal)
        uses: actions/upload-artifact@v4
        with:
          name: MedOps-universal-dmg
          path: dist/*.dmg

      - name: Upload ZIP (universal)
        uses: actions/upload-artifact@v4
        with:
          name: MedOps-universal-zip
          path: dist/*.zip
