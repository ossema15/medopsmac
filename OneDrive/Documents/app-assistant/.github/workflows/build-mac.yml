name: Build macOS (DMG/ZIP)

on:
  workflow_dispatch:
    inputs:
      arch:
        description: "Architecture to build (x64, arm64, both)"
        required: false
        default: both
  push:
    branches: [ main ]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'webpack.config.js'
      - 'src/**'
      - 'main/**'
      - 'app/**'
      - '.github/workflows/build-mac.yml'

jobs:
  build-mac:
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        env:
          npm_config_production: "false"
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi

      - name: "Debug: show installed binaries"
        run: |
          ls -la node_modules/.bin || true

      - name: "Debug: npm/npx versions and bin presence"
        run: |
          node -v
          npm -v
          npx --version || true
          ls -la ./node_modules/.bin || true

      - name: Build renderer
        run: npm run build

      - name: Build macOS artifacts (universal)
        env:
          # Optional signing/notarization (set these as GitHub Secrets if you want notarized builds)
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_IDENTITY_AUTO: true
          # If you use API key-based notarization instead, provide:
          # APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          # APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
        run: |
          # 1) Build per-arch apps to produce .app bundles
          npx electron-builder --mac dmg zip --x64
          npx electron-builder --mac dmg zip --arm64
          # 2) Merge into a universal .app (use devDependency CLI)
          ./node_modules/.bin/electron-universal \
            --sourceX64 "dist/mac/MedOps.app" \
            --sourceArm64 "dist/mac-arm64/MedOps.app" \
            --destination "dist/MedOps-universal.app"
          # 3) Package the universal app into DMG/ZIP
          npx electron-builder --mac dmg zip --prepackaged dist/MedOps-universal.app

      - name: Upload DMG (universal)
        uses: actions/upload-artifact@v4
        with:
          name: MedOps-universal-dmg
          path: OneDrive/Documents/app-assistant/dist/*.dmg

      - name: Upload ZIP (universal)
        uses: actions/upload-artifact@v4
        with:
          name: MedOps-universal-zip
          path: OneDrive/Documents/app-assistant/dist/*.zip
